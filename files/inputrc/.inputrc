# https://wiki.archlinux.org/index.php/readline

# Make Tab autocomplete regardless of filename case
set completion-ignore-case on

# List all matches in case multiple possible completions are possible
set show-all-if-ambiguous on

# Immediately add a trailing slash when autocompleting symlinks to directories
set mark-symlinked-directories on

# Use the text that has already been typed as the prefix for searching through
# commands (i.e. more intelligent Up/Down behavior)
"\e[B": history-search-forward
"\e[A": history-search-backward

# Do not autocomplete hidden files unless the pattern explicitly begins with a dot
set match-hidden-files off

# Show all autocomplete results at once
set page-completions off

# If there are more than 200 possible completions for a word, ask to show them all
set completion-query-items 200

# Show extra file information when completing, like `ls -F` does
set visible-stats on

# Color files by types
set colored-stats on

# Append char to indicate type
set visible-stats on

# Mark symlinked directories
set mark-symlinked-directories on

# Color the common prefix
set colored-completion-prefix on

# Color the common prefix in menu-complete
set menu-complete-display-prefix on

# Be more intelligent when autocompleting by also looking at the text after
# the cursor. For example, when the current line is "cd ~/src/mozil", and
# the cursor is on the "z", pressing Tab will not autocomplete it to "cd
# ~/src/mozillail", but to "cd ~/src/mozilla". (This is supported by the
# Readline used by Bash 4.)
set skip-completed-text on

# Allow UTF-8 input and output, instead of showing stuff like $'\0123\0456'
set input-meta on
set output-meta on
set convert-meta off

# Use Alt/Meta + Delete to delete the preceding word
"\e[3;3~": kill-word

## enable Alt-arrows
"\e[1;5D": backward-word ### Alt left
"\e[1;5C": forward-word ### Alt right

# Vi-mode settings (http://vim.wikia.com/wiki/Use_vi_shortcuts_in_terminal)

# a full example omitting the wrapping \1 and \2
#
# \e[     (open sequence: ESC CSI)
# 48;5;   (specifies 256 bg)
# 46      (bg color)
# m       (end)
# 1;      (bold)
# 38;5;   (specifies 256 fg)
# 21      (fg color)
# m       (end)
# COMMAND (some text to display)
# \e[     (open sequence)
# 0       (reset)
# m       (end)
# \e[     (open sequence)
# 0       (cursor type)
# q       (end)

# Adds character to the beginning of the prompt indicating the current editing
# mode
set show-mode-in-prompt on

# Use vi style editing
set editing-mode vi

# Set the key sequences for vi mode, set to lower timeout so not to wait
# too long for a key sequence to complete, especially when using escape
set keyseq-timeout 50

# Custom mode strings for modes
# set vi-cmd-mode-string "\1\e[48;5;4m\2\1\e[1;38;5;18m\2 N \1\e[0m\2 \1\e[0 q\2"
# set vi-ins-mode-string "\1\e[48;5;7m\2\1\e[1;38;5;18m\2 I \1\e[0m\2 \1\e[0 q\2"
# set vi-cmd-mode-string \1\e[31;1m\2 ≡ \1\e[0m\2
# set vi-ins-mode-string \1\e[31;1m\2 > \1\e[0m\2
# set vi-ins-mode-string \1\e[31;1m\2> \1\e[0m\2
# set vi-cmd-mode-string \1\e[31;1m\2# \1\e[0m\2
# set vi-cmd-mode-string "\1\e[0 q\2"
# set vi-ins-mode-string "\1\e[6 q\2"
set vi-cmd-mode-string \1\e[31;1m\2 ■ \1\e[0m\2
set vi-ins-mode-string \1\e[31;1m\2 ⯈ \1\e[0m\2


# Keymaps for when we're in command mode
set keymap vi-command

# Insert the arguments from the last command
"p": "i !!*\r"

# When hitting option-up/option-down, cycle through the previous commands
# which start with the prefix you've entered, rather than just cycling through
# the last entered commands.
# In OS X's Terminal.app preferences, I have 'Use option as meta key' off, and
# have mapped "option cursor up" to "\033\033[A" and "option cursor down" to 
# "\033\033[B".
# Feel free to bind to whatever you want. Delete the first '\e' in the keymap
# to set plain up/down to do a history search by default.
"\e\e[A": history-search-backward
"\e\e[B": history-search-forward

# Keymaps for when we're in insert mode
set keymap vi-insert

# Pressing tab will list all completions & select the first one. Pressing it 
# again will cycle through available completions.
TAB: menu-complete

# Shift-TAB cycles completions backward
"\e[Z": menu-complete-backward

# Option-up/option-down should also apply to insert mode
"\e\e[A": history-search-backward
"\e\e[B": history-search-forward

# Needed because binding 'p' in command mode above wipes its insert mode
# function, too. This fixes that, and will insert 'p' when you type 'p'.
"p": self-insert
