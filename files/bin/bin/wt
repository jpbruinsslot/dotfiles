#!/usr/bin/env bash
set -e
#
# wt
#
# This script provides a convenient wrapper around `git worktree` commands,
# simplifying common worktree operations such as creating, listing, removing,
# and pruning worktrees. It aims to streamline the workflow for managing
# multiple working directories for a single Git repository.
#
# Features:
# - `checkout <branch-name>`: Creates a new worktree for the specified branch.
#   If the branch doesn't exist locally, it attempts to create it from `origin/<branch-name>`
#   or as a new, empty branch. If the worktree already exists, it provides a `cd` command.
# - `list`: Lists all existing git worktrees.
# - `remove <branch-name>`: Removes a specified worktree and its associated directory.
# - `prune`: Prunes (removes) stale git worktree entries.
#
# Dependencies:
# - `git` (specifically `git worktree` functionality).
#
# Usage:
#   wt <command> [arguments]
#
# Commands:
#   checkout <branch-name>  Create and checkout a new worktree for the specified branch.
#                           Example: `wt checkout feature/new-feature`
#   list                    List all existing git worktrees.
#                           Example: `wt list`
#   remove <branch-name>    Remove a specified worktree and its associated directory.
#                           Example: `wt remove old-feature`
#   prune                   Prune (remove) stale git worktree entries.
#                           Example: `wt prune`
#

checkout_command() {
    local branch=$1

    if [ -z "$branch" ]; then
        echo "Error: Branch name is required for checkout command."
        exit 1
    fi

    # Check if worktree directory already exists
    if [ -d "$branch" ]; then
        echo "Worktree for branch '$branch' already exists. Changing to directory '$branch'."
        echo "cd \"$branch\""
        return 0
    fi

    # Check if branch exists locally
    if ! git show-ref --verify --quiet "refs/heads/$branch"; then
        echo "Branch '$branch' does not exist locally. Attempting to create it from origin/$branch or as a new branch..."
        git fetch origin "$branch" 2>/dev/null || true                            # Fetch, ignore errors if remote branch doesn't exist
        git branch "$branch" "origin/$branch" 2>/dev/null || git branch "$branch" # Create from origin or as new
    fi

    # Create worktree in folder named after branch
    git worktree add "$branch" "$branch"
    echo "cd \"$branch\""
}

list_command() {
    git worktree list
}

remove_command() {
    local branch=$1

    if [ -z "$branch" ]; then
        echo "Error: Branch name is required for remove command."
        exit 1
    fi

    local worktree_path=$(git worktree list --porcelain | grep "^worktree $branch" | sed -n 's/^worktree //p')

    if [ -z "$worktree_path" ]; then
        echo "Error: No worktree found for branch '$branch'."
        exit 1
    fi

    echo "Removing worktree at: $worktree_path"
    git worktree remove "$worktree_path" || true # Allow removal to fail if already removed or other issues
    rm -rf "$worktree_path"
    echo "Worktree for branch '$branch' removed."
}

prune_command() {
    echo "Pruning git worktrees..."
    git worktree prune
    echo "Git worktrees pruned."
}

main() {
    local command=$1
    local arg=$2

    case "$command" in
    checkout)
        checkout_command "$arg"
        ;;
    list)
        list_command
        ;;
    remove)
        remove_command "$arg"
        ;;
    prune)
        prune_command
        ;;
    *)
        echo "Usage: wt <command> [arguments]"
        echo ""
        echo "Commands:"
        echo "  checkout <branch-name>  Create and checkout a new worktree for the specified branch."
        echo "  list                    List all existing git worktrees."
        echo "  remove <branch-name>    Remove a specified worktree and its associated directory."
        echo "  prune                   Prune (remove) stale git worktree entries."
        exit 1
        ;;
    esac
}

main "$@"

